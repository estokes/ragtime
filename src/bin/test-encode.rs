use anyhow::Result;
use ragtime::{EmbedDb, QaModel};

fn test_encode() -> Result<()> {
    const BASE: &str = "/home/eric/proj/bge-m3/onnx";
    const ESIZE: usize = 1024; // the size of the sentence embedding generated by the model
    let mut edb = EmbedDb::new(
        &format!("{BASE}/model.onnx"),
        &format!("{BASE}/tokenizer.json"),
        ESIZE,
    )?;
    edb.add(vec![
        "I've got a lovely bunch of coconuts".into(),
        "I like coconuts very much".into(),
        "A goomba is a character from super mario bros".into(),
    ])?;
    let m = edb.search("who here likes coconuts?".into(), 2)?;
    println!("{m:?}");
    Ok(())
}

fn test_gen() -> Result<()> {
    const BASE: &str = "/home/eric/proj/Phi-3-mini-128k-instruct-onnx/cpu_and_mobile/cpu-int4-rtn-block-32";
    let gen = QaModel::new(
        &format!("{BASE}/phi3-mini-128k-instruct-cpu-int4-rtn-block-32.onnx"),
        &format!("{BASE}/tokenizer.json"),
    )?;
    gen.ask("what color is the moon?", 30)?;
    Ok(())
}

pub fn main() -> Result<()> {
    tracing_subscriber::fmt::init();
    ort::init().commit()?;
    test_gen()
}
